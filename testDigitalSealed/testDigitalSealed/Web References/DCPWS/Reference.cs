//------------------------------------------------------------------------------
// <auto-generated>
//     這段程式碼是由工具產生的。
//     執行階段版本:4.0.30319.18052
//
//     對這個檔案所做的變更可能會造成錯誤的行為，而且如果重新產生程式碼，
//     變更將會遺失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// 原始程式碼已由 Microsoft.VSDesigner 自動產生，版本 4.0.30319.18052。
// 
#pragma warning disable 1591

namespace testDigitalSealed.DCPWS {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="DCPWSESoap", Namespace="http://www.dsic.com.tw/")]
    public partial class DCPWSE : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback getWordDocAttInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback getInDocAttInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback updateTempCaDetailOperationCompleted;
        
        private System.Threading.SendOrPostCallback getMergeDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSiXMLOperationCompleted;
        
        private System.Threading.SendOrPostCallback SiExistOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDepSiXMLOperationCompleted;
        
        private System.Threading.SendOrPostCallback SaveReSignXMLOperationCompleted;
        
        private System.Threading.SendOrPostCallback MergeReSignXMLOperationCompleted;
        
        private System.Threading.SendOrPostCallback SignWithHSMOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback UploadChunkOperationCompleted;
        
        private System.Threading.SendOrPostCallback UploadDepChunkOperationCompleted;
        
        private System.Threading.SendOrPostCallback DownloadChunkOperationCompleted;
        
        private System.Threading.SendOrPostCallback DownloadDepChunkOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFileSizeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDepFileSizeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFilesListOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public DCPWSE() {
            this.Url = global::testDigitalSealed.Properties.Settings.Default.testDigitalSealed_DCPWS_DCPWSE;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event getWordDocAttInfoCompletedEventHandler getWordDocAttInfoCompleted;
        
        /// <remarks/>
        public event getInDocAttInfoCompletedEventHandler getInDocAttInfoCompleted;
        
        /// <remarks/>
        public event updateTempCaDetailCompletedEventHandler updateTempCaDetailCompleted;
        
        /// <remarks/>
        public event getMergeDataCompletedEventHandler getMergeDataCompleted;
        
        /// <remarks/>
        public event GetSiXMLCompletedEventHandler GetSiXMLCompleted;
        
        /// <remarks/>
        public event SiExistCompletedEventHandler SiExistCompleted;
        
        /// <remarks/>
        public event GetDepSiXMLCompletedEventHandler GetDepSiXMLCompleted;
        
        /// <remarks/>
        public event SaveReSignXMLCompletedEventHandler SaveReSignXMLCompleted;
        
        /// <remarks/>
        public event MergeReSignXMLCompletedEventHandler MergeReSignXMLCompleted;
        
        /// <remarks/>
        public event SignWithHSMCompletedEventHandler SignWithHSMCompleted;
        
        /// <remarks/>
        public event UpdateStatusCompletedEventHandler UpdateStatusCompleted;
        
        /// <remarks/>
        public event UploadChunkCompletedEventHandler UploadChunkCompleted;
        
        /// <remarks/>
        public event UploadDepChunkCompletedEventHandler UploadDepChunkCompleted;
        
        /// <remarks/>
        public event DownloadChunkCompletedEventHandler DownloadChunkCompleted;
        
        /// <remarks/>
        public event DownloadDepChunkCompletedEventHandler DownloadDepChunkCompleted;
        
        /// <remarks/>
        public event GetFileSizeCompletedEventHandler GetFileSizeCompleted;
        
        /// <remarks/>
        public event GetDepFileSizeCompletedEventHandler GetDepFileSizeCompleted;
        
        /// <remarks/>
        public event GetFilesListCompletedEventHandler GetFilesListCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.dsic.com.tw/getWordDocAttInfo", RequestNamespace="http://www.dsic.com.tw/", ResponseNamespace="http://www.dsic.com.tw/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode getWordDocAttInfo(string _orgid, string _docno) {
            object[] results = this.Invoke("getWordDocAttInfo", new object[] {
                        _orgid,
                        _docno});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void getWordDocAttInfoAsync(string _orgid, string _docno) {
            this.getWordDocAttInfoAsync(_orgid, _docno, null);
        }
        
        /// <remarks/>
        public void getWordDocAttInfoAsync(string _orgid, string _docno, object userState) {
            if ((this.getWordDocAttInfoOperationCompleted == null)) {
                this.getWordDocAttInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetWordDocAttInfoOperationCompleted);
            }
            this.InvokeAsync("getWordDocAttInfo", new object[] {
                        _orgid,
                        _docno}, this.getWordDocAttInfoOperationCompleted, userState);
        }
        
        private void OngetWordDocAttInfoOperationCompleted(object arg) {
            if ((this.getWordDocAttInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getWordDocAttInfoCompleted(this, new getWordDocAttInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.dsic.com.tw/getInDocAttInfo", RequestNamespace="http://www.dsic.com.tw/", ResponseNamespace="http://www.dsic.com.tw/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode getInDocAttInfo(string _orgid, string _docno) {
            object[] results = this.Invoke("getInDocAttInfo", new object[] {
                        _orgid,
                        _docno});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void getInDocAttInfoAsync(string _orgid, string _docno) {
            this.getInDocAttInfoAsync(_orgid, _docno, null);
        }
        
        /// <remarks/>
        public void getInDocAttInfoAsync(string _orgid, string _docno, object userState) {
            if ((this.getInDocAttInfoOperationCompleted == null)) {
                this.getInDocAttInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetInDocAttInfoOperationCompleted);
            }
            this.InvokeAsync("getInDocAttInfo", new object[] {
                        _orgid,
                        _docno}, this.getInDocAttInfoOperationCompleted, userState);
        }
        
        private void OngetInDocAttInfoOperationCompleted(object arg) {
            if ((this.getInDocAttInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getInDocAttInfoCompleted(this, new getInDocAttInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.dsic.com.tw/updateTempCaDetail", RequestNamespace="http://www.dsic.com.tw/", ResponseNamespace="http://www.dsic.com.tw/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool updateTempCaDetail(System.Xml.XmlNode UserTempCaDetail) {
            object[] results = this.Invoke("updateTempCaDetail", new object[] {
                        UserTempCaDetail});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void updateTempCaDetailAsync(System.Xml.XmlNode UserTempCaDetail) {
            this.updateTempCaDetailAsync(UserTempCaDetail, null);
        }
        
        /// <remarks/>
        public void updateTempCaDetailAsync(System.Xml.XmlNode UserTempCaDetail, object userState) {
            if ((this.updateTempCaDetailOperationCompleted == null)) {
                this.updateTempCaDetailOperationCompleted = new System.Threading.SendOrPostCallback(this.OnupdateTempCaDetailOperationCompleted);
            }
            this.InvokeAsync("updateTempCaDetail", new object[] {
                        UserTempCaDetail}, this.updateTempCaDetailOperationCompleted, userState);
        }
        
        private void OnupdateTempCaDetailOperationCompleted(object arg) {
            if ((this.updateTempCaDetailCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.updateTempCaDetailCompleted(this, new updateTempCaDetailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.dsic.com.tw/getMergeData", RequestNamespace="http://www.dsic.com.tw/", ResponseNamespace="http://www.dsic.com.tw/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] getMergeData(string _orgid, string _docno) {
            object[] results = this.Invoke("getMergeData", new object[] {
                        _orgid,
                        _docno});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void getMergeDataAsync(string _orgid, string _docno) {
            this.getMergeDataAsync(_orgid, _docno, null);
        }
        
        /// <remarks/>
        public void getMergeDataAsync(string _orgid, string _docno, object userState) {
            if ((this.getMergeDataOperationCompleted == null)) {
                this.getMergeDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetMergeDataOperationCompleted);
            }
            this.InvokeAsync("getMergeData", new object[] {
                        _orgid,
                        _docno}, this.getMergeDataOperationCompleted, userState);
        }
        
        private void OngetMergeDataOperationCompleted(object arg) {
            if ((this.getMergeDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getMergeDataCompleted(this, new getMergeDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.dsic.com.tw/GetSiXML", RequestNamespace="http://www.dsic.com.tw/", ResponseNamespace="http://www.dsic.com.tw/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetSiXML(string _docno, string orgid) {
            object[] results = this.Invoke("GetSiXML", new object[] {
                        _docno,
                        orgid});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetSiXMLAsync(string _docno, string orgid) {
            this.GetSiXMLAsync(_docno, orgid, null);
        }
        
        /// <remarks/>
        public void GetSiXMLAsync(string _docno, string orgid, object userState) {
            if ((this.GetSiXMLOperationCompleted == null)) {
                this.GetSiXMLOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSiXMLOperationCompleted);
            }
            this.InvokeAsync("GetSiXML", new object[] {
                        _docno,
                        orgid}, this.GetSiXMLOperationCompleted, userState);
        }
        
        private void OnGetSiXMLOperationCompleted(object arg) {
            if ((this.GetSiXMLCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSiXMLCompleted(this, new GetSiXMLCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.dsic.com.tw/SiExist", RequestNamespace="http://www.dsic.com.tw/", ResponseNamespace="http://www.dsic.com.tw/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SiExist(string _docno, string orgid) {
            object[] results = this.Invoke("SiExist", new object[] {
                        _docno,
                        orgid});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SiExistAsync(string _docno, string orgid) {
            this.SiExistAsync(_docno, orgid, null);
        }
        
        /// <remarks/>
        public void SiExistAsync(string _docno, string orgid, object userState) {
            if ((this.SiExistOperationCompleted == null)) {
                this.SiExistOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSiExistOperationCompleted);
            }
            this.InvokeAsync("SiExist", new object[] {
                        _docno,
                        orgid}, this.SiExistOperationCompleted, userState);
        }
        
        private void OnSiExistOperationCompleted(object arg) {
            if ((this.SiExistCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SiExistCompleted(this, new SiExistCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.dsic.com.tw/GetDepSiXML", RequestNamespace="http://www.dsic.com.tw/", ResponseNamespace="http://www.dsic.com.tw/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetDepSiXML(string _docno, string depid, string orgid) {
            object[] results = this.Invoke("GetDepSiXML", new object[] {
                        _docno,
                        depid,
                        orgid});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetDepSiXMLAsync(string _docno, string depid, string orgid) {
            this.GetDepSiXMLAsync(_docno, depid, orgid, null);
        }
        
        /// <remarks/>
        public void GetDepSiXMLAsync(string _docno, string depid, string orgid, object userState) {
            if ((this.GetDepSiXMLOperationCompleted == null)) {
                this.GetDepSiXMLOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDepSiXMLOperationCompleted);
            }
            this.InvokeAsync("GetDepSiXML", new object[] {
                        _docno,
                        depid,
                        orgid}, this.GetDepSiXMLOperationCompleted, userState);
        }
        
        private void OnGetDepSiXMLOperationCompleted(object arg) {
            if ((this.GetDepSiXMLCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDepSiXMLCompleted(this, new GetDepSiXMLCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.dsic.com.tw/SaveReSignXML", RequestNamespace="http://www.dsic.com.tw/", ResponseNamespace="http://www.dsic.com.tw/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SaveReSignXML(string _docno, string orgid, string resignID, System.Xml.XmlNode siDoc) {
            object[] results = this.Invoke("SaveReSignXML", new object[] {
                        _docno,
                        orgid,
                        resignID,
                        siDoc});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SaveReSignXMLAsync(string _docno, string orgid, string resignID, System.Xml.XmlNode siDoc) {
            this.SaveReSignXMLAsync(_docno, orgid, resignID, siDoc, null);
        }
        
        /// <remarks/>
        public void SaveReSignXMLAsync(string _docno, string orgid, string resignID, System.Xml.XmlNode siDoc, object userState) {
            if ((this.SaveReSignXMLOperationCompleted == null)) {
                this.SaveReSignXMLOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaveReSignXMLOperationCompleted);
            }
            this.InvokeAsync("SaveReSignXML", new object[] {
                        _docno,
                        orgid,
                        resignID,
                        siDoc}, this.SaveReSignXMLOperationCompleted, userState);
        }
        
        private void OnSaveReSignXMLOperationCompleted(object arg) {
            if ((this.SaveReSignXMLCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaveReSignXMLCompleted(this, new SaveReSignXMLCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.dsic.com.tw/MergeReSignXML", RequestNamespace="http://www.dsic.com.tw/", ResponseNamespace="http://www.dsic.com.tw/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool MergeReSignXML(string _docno, string orgid) {
            object[] results = this.Invoke("MergeReSignXML", new object[] {
                        _docno,
                        orgid});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void MergeReSignXMLAsync(string _docno, string orgid) {
            this.MergeReSignXMLAsync(_docno, orgid, null);
        }
        
        /// <remarks/>
        public void MergeReSignXMLAsync(string _docno, string orgid, object userState) {
            if ((this.MergeReSignXMLOperationCompleted == null)) {
                this.MergeReSignXMLOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMergeReSignXMLOperationCompleted);
            }
            this.InvokeAsync("MergeReSignXML", new object[] {
                        _docno,
                        orgid}, this.MergeReSignXMLOperationCompleted, userState);
        }
        
        private void OnMergeReSignXMLOperationCompleted(object arg) {
            if ((this.MergeReSignXMLCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MergeReSignXMLCompleted(this, new MergeReSignXMLCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.dsic.com.tw/SignWithHSM", RequestNamespace="http://www.dsic.com.tw/", ResponseNamespace="http://www.dsic.com.tw/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SignWithHSM(string digestXml, string sigid, string keyname) {
            object[] results = this.Invoke("SignWithHSM", new object[] {
                        digestXml,
                        sigid,
                        keyname});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SignWithHSMAsync(string digestXml, string sigid, string keyname) {
            this.SignWithHSMAsync(digestXml, sigid, keyname, null);
        }
        
        /// <remarks/>
        public void SignWithHSMAsync(string digestXml, string sigid, string keyname, object userState) {
            if ((this.SignWithHSMOperationCompleted == null)) {
                this.SignWithHSMOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSignWithHSMOperationCompleted);
            }
            this.InvokeAsync("SignWithHSM", new object[] {
                        digestXml,
                        sigid,
                        keyname}, this.SignWithHSMOperationCompleted, userState);
        }
        
        private void OnSignWithHSMOperationCompleted(object arg) {
            if ((this.SignWithHSMCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SignWithHSMCompleted(this, new SignWithHSMCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.dsic.com.tw/UpdateStatus", RequestNamespace="http://www.dsic.com.tw/", ResponseNamespace="http://www.dsic.com.tw/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool UpdateStatus(string modecode, string flowid, string oedocno, string userid, string _orgid, string DocNO) {
            object[] results = this.Invoke("UpdateStatus", new object[] {
                        modecode,
                        flowid,
                        oedocno,
                        userid,
                        _orgid,
                        DocNO});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateStatusAsync(string modecode, string flowid, string oedocno, string userid, string _orgid, string DocNO) {
            this.UpdateStatusAsync(modecode, flowid, oedocno, userid, _orgid, DocNO, null);
        }
        
        /// <remarks/>
        public void UpdateStatusAsync(string modecode, string flowid, string oedocno, string userid, string _orgid, string DocNO, object userState) {
            if ((this.UpdateStatusOperationCompleted == null)) {
                this.UpdateStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateStatusOperationCompleted);
            }
            this.InvokeAsync("UpdateStatus", new object[] {
                        modecode,
                        flowid,
                        oedocno,
                        userid,
                        _orgid,
                        DocNO}, this.UpdateStatusOperationCompleted, userState);
        }
        
        private void OnUpdateStatusOperationCompleted(object arg) {
            if ((this.UpdateStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateStatusCompleted(this, new UpdateStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.dsic.com.tw/UploadChunk", RequestNamespace="http://www.dsic.com.tw/", ResponseNamespace="http://www.dsic.com.tw/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UploadChunk(string _docno, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] buffer, long Offset, string orgid) {
            this.Invoke("UploadChunk", new object[] {
                        _docno,
                        buffer,
                        Offset,
                        orgid});
        }
        
        /// <remarks/>
        public void UploadChunkAsync(string _docno, byte[] buffer, long Offset, string orgid) {
            this.UploadChunkAsync(_docno, buffer, Offset, orgid, null);
        }
        
        /// <remarks/>
        public void UploadChunkAsync(string _docno, byte[] buffer, long Offset, string orgid, object userState) {
            if ((this.UploadChunkOperationCompleted == null)) {
                this.UploadChunkOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadChunkOperationCompleted);
            }
            this.InvokeAsync("UploadChunk", new object[] {
                        _docno,
                        buffer,
                        Offset,
                        orgid}, this.UploadChunkOperationCompleted, userState);
        }
        
        private void OnUploadChunkOperationCompleted(object arg) {
            if ((this.UploadChunkCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadChunkCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.dsic.com.tw/UploadDepChunk", RequestNamespace="http://www.dsic.com.tw/", ResponseNamespace="http://www.dsic.com.tw/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UploadDepChunk(string _docno, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] buffer, long Offset, string foldername, string orgid) {
            this.Invoke("UploadDepChunk", new object[] {
                        _docno,
                        buffer,
                        Offset,
                        foldername,
                        orgid});
        }
        
        /// <remarks/>
        public void UploadDepChunkAsync(string _docno, byte[] buffer, long Offset, string foldername, string orgid) {
            this.UploadDepChunkAsync(_docno, buffer, Offset, foldername, orgid, null);
        }
        
        /// <remarks/>
        public void UploadDepChunkAsync(string _docno, byte[] buffer, long Offset, string foldername, string orgid, object userState) {
            if ((this.UploadDepChunkOperationCompleted == null)) {
                this.UploadDepChunkOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadDepChunkOperationCompleted);
            }
            this.InvokeAsync("UploadDepChunk", new object[] {
                        _docno,
                        buffer,
                        Offset,
                        foldername,
                        orgid}, this.UploadDepChunkOperationCompleted, userState);
        }
        
        private void OnUploadDepChunkOperationCompleted(object arg) {
            if ((this.UploadDepChunkCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadDepChunkCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.dsic.com.tw/DownloadChunk", RequestNamespace="http://www.dsic.com.tw/", ResponseNamespace="http://www.dsic.com.tw/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] DownloadChunk(string _docno, string orgid) {
            object[] results = this.Invoke("DownloadChunk", new object[] {
                        _docno,
                        orgid});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void DownloadChunkAsync(string _docno, string orgid) {
            this.DownloadChunkAsync(_docno, orgid, null);
        }
        
        /// <remarks/>
        public void DownloadChunkAsync(string _docno, string orgid, object userState) {
            if ((this.DownloadChunkOperationCompleted == null)) {
                this.DownloadChunkOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDownloadChunkOperationCompleted);
            }
            this.InvokeAsync("DownloadChunk", new object[] {
                        _docno,
                        orgid}, this.DownloadChunkOperationCompleted, userState);
        }
        
        private void OnDownloadChunkOperationCompleted(object arg) {
            if ((this.DownloadChunkCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DownloadChunkCompleted(this, new DownloadChunkCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.dsic.com.tw/DownloadDepChunk", RequestNamespace="http://www.dsic.com.tw/", ResponseNamespace="http://www.dsic.com.tw/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] DownloadDepChunk(string _docno, string foldername, string orgid) {
            object[] results = this.Invoke("DownloadDepChunk", new object[] {
                        _docno,
                        foldername,
                        orgid});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void DownloadDepChunkAsync(string _docno, string foldername, string orgid) {
            this.DownloadDepChunkAsync(_docno, foldername, orgid, null);
        }
        
        /// <remarks/>
        public void DownloadDepChunkAsync(string _docno, string foldername, string orgid, object userState) {
            if ((this.DownloadDepChunkOperationCompleted == null)) {
                this.DownloadDepChunkOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDownloadDepChunkOperationCompleted);
            }
            this.InvokeAsync("DownloadDepChunk", new object[] {
                        _docno,
                        foldername,
                        orgid}, this.DownloadDepChunkOperationCompleted, userState);
        }
        
        private void OnDownloadDepChunkOperationCompleted(object arg) {
            if ((this.DownloadDepChunkCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DownloadDepChunkCompleted(this, new DownloadDepChunkCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.dsic.com.tw/GetFileSize", RequestNamespace="http://www.dsic.com.tw/", ResponseNamespace="http://www.dsic.com.tw/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public long GetFileSize(string _docno, string orgid) {
            object[] results = this.Invoke("GetFileSize", new object[] {
                        _docno,
                        orgid});
            return ((long)(results[0]));
        }
        
        /// <remarks/>
        public void GetFileSizeAsync(string _docno, string orgid) {
            this.GetFileSizeAsync(_docno, orgid, null);
        }
        
        /// <remarks/>
        public void GetFileSizeAsync(string _docno, string orgid, object userState) {
            if ((this.GetFileSizeOperationCompleted == null)) {
                this.GetFileSizeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFileSizeOperationCompleted);
            }
            this.InvokeAsync("GetFileSize", new object[] {
                        _docno,
                        orgid}, this.GetFileSizeOperationCompleted, userState);
        }
        
        private void OnGetFileSizeOperationCompleted(object arg) {
            if ((this.GetFileSizeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFileSizeCompleted(this, new GetFileSizeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.dsic.com.tw/GetDepFileSize", RequestNamespace="http://www.dsic.com.tw/", ResponseNamespace="http://www.dsic.com.tw/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public long GetDepFileSize(string _docno, string DepId, string orgid) {
            object[] results = this.Invoke("GetDepFileSize", new object[] {
                        _docno,
                        DepId,
                        orgid});
            return ((long)(results[0]));
        }
        
        /// <remarks/>
        public void GetDepFileSizeAsync(string _docno, string DepId, string orgid) {
            this.GetDepFileSizeAsync(_docno, DepId, orgid, null);
        }
        
        /// <remarks/>
        public void GetDepFileSizeAsync(string _docno, string DepId, string orgid, object userState) {
            if ((this.GetDepFileSizeOperationCompleted == null)) {
                this.GetDepFileSizeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDepFileSizeOperationCompleted);
            }
            this.InvokeAsync("GetDepFileSize", new object[] {
                        _docno,
                        DepId,
                        orgid}, this.GetDepFileSizeOperationCompleted, userState);
        }
        
        private void OnGetDepFileSizeOperationCompleted(object arg) {
            if ((this.GetDepFileSizeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDepFileSizeCompleted(this, new GetDepFileSizeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.dsic.com.tw/GetFilesList", RequestNamespace="http://www.dsic.com.tw/", ResponseNamespace="http://www.dsic.com.tw/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] GetFilesList(string UploadPath, out bool DirectoryExist) {
            object[] results = this.Invoke("GetFilesList", new object[] {
                        UploadPath});
            DirectoryExist = ((bool)(results[1]));
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void GetFilesListAsync(string UploadPath) {
            this.GetFilesListAsync(UploadPath, null);
        }
        
        /// <remarks/>
        public void GetFilesListAsync(string UploadPath, object userState) {
            if ((this.GetFilesListOperationCompleted == null)) {
                this.GetFilesListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFilesListOperationCompleted);
            }
            this.InvokeAsync("GetFilesList", new object[] {
                        UploadPath}, this.GetFilesListOperationCompleted, userState);
        }
        
        private void OnGetFilesListOperationCompleted(object arg) {
            if ((this.GetFilesListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFilesListCompleted(this, new GetFilesListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getWordDocAttInfoCompletedEventHandler(object sender, getWordDocAttInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getWordDocAttInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getWordDocAttInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getInDocAttInfoCompletedEventHandler(object sender, getInDocAttInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getInDocAttInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getInDocAttInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void updateTempCaDetailCompletedEventHandler(object sender, updateTempCaDetailCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class updateTempCaDetailCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal updateTempCaDetailCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getMergeDataCompletedEventHandler(object sender, getMergeDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getMergeDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getMergeDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetSiXMLCompletedEventHandler(object sender, GetSiXMLCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSiXMLCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSiXMLCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void SiExistCompletedEventHandler(object sender, SiExistCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SiExistCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SiExistCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetDepSiXMLCompletedEventHandler(object sender, GetDepSiXMLCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDepSiXMLCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDepSiXMLCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void SaveReSignXMLCompletedEventHandler(object sender, SaveReSignXMLCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SaveReSignXMLCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SaveReSignXMLCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void MergeReSignXMLCompletedEventHandler(object sender, MergeReSignXMLCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MergeReSignXMLCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MergeReSignXMLCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void SignWithHSMCompletedEventHandler(object sender, SignWithHSMCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SignWithHSMCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SignWithHSMCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void UpdateStatusCompletedEventHandler(object sender, UpdateStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void UploadChunkCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void UploadDepChunkCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void DownloadChunkCompletedEventHandler(object sender, DownloadChunkCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DownloadChunkCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DownloadChunkCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void DownloadDepChunkCompletedEventHandler(object sender, DownloadDepChunkCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DownloadDepChunkCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DownloadDepChunkCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetFileSizeCompletedEventHandler(object sender, GetFileSizeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFileSizeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFileSizeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetDepFileSizeCompletedEventHandler(object sender, GetDepFileSizeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDepFileSizeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDepFileSizeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetFilesListCompletedEventHandler(object sender, GetFilesListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFilesListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFilesListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool DirectoryExist {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
}

#pragma warning restore 1591